<?php

namespace frontend\controllers;

use common\models\LoginForm;
use frontend\models\Message;
use frontend\models\SignupForm;
use frontend\models\User;
use Yii;
use yii\base\NotSupportedException;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\rest\ActiveController;

class UserController extends ActiveController
{
    public $modelClass = User::class;
    public $enableCsrfValidation = false;

    public function actionSignup()
    {
        if (Yii::$app->request->isPost) {
            $data = Yii::$app->request->Post();
            $user = new User();
            $user->status = User::STATUS_ACTIVE;
            $user->username = $data['login'];
            $user->email = $data['email'];
            $user->name = $data['name'];
            $user->lastname = $data['lastname'];
            $user->patronymic = $data['patronymic'];
            $user->patronymic = $data['patronymic'];
            $user->date = $data['date'];
            $user->city = $data['city'];
            $user->phone = $data['phone'];
            $user->avatar = $data['avatar'];
            $user->setPassword($data['password']);
            $user->generateAuthKey();
            $user->generateEmailVerificationToken();
            $user->save();
            return '{"status": "ok"}';
        }

        return '{"status": "false"}';
    }

    public function actionLogin()
    {
        $user = User::find()->where(['username' => $_POST['username']])->one();

        if ($user->validatePassword($_POST['password'])) {
            $user->access_token = $user->generateAccessToken();
            $user->save();
            return ['access_token' => $user->access_token];
        }

        throw new \yii\web\ForbiddenHttpException('Access is denied');
    }

    public function actionIndex()
    {
        return new ActiveDataProvider([
            'query' => User::find()->where(['id' => Yii::$app->user->identity->getId()]),
            'pagination' => [
                'pageSize' => 15,
            ],

        ]);
    }

    public function checkAccess($action, $model = null, $params = [])
    {
        if ($action === 'update' || $action === 'view' || $action === 'delete') {
            if ($model->id != Yii::$app->user->identity->getId())
                throw new \yii\web\ForbiddenHttpException(sprintf('You can only %s articles that you\'ve created.', $action));
        }
    }

    public function actions()
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['index']);
        return $actions;
    }


    public function behaviors()
    {
        $behaviors = parent::behaviors();

        unset($behaviors['authenticator']);

        // add CORS filter
        $behaviors['corsFilter'] = [
            'class' => \yii\filters\Cors::class,
        ];

        // re-add authentication filter
        $behaviors['authenticator'] = [
            'class' => HttpBearerAuth::class,
        ];
        // avoid authentication on CORS-pre-flight requests (HTTP OPTIONS method)
        $behaviors['authenticator']['except'] = ['signup', 'login'];
        $behaviors['contentNegotiator'] = [
            'class' => \yii\filters\ContentNegotiator::class,
            'formatParam' => '_format',
            'formats' => [
                'application/json' => \yii\web\Response::FORMAT_JSON,
                'application/xml' => \yii\web\Response::FORMAT_XML,
            ],
        ];

        return $behaviors;
    }

    public $serializer = [
        'class' => 'yii\rest\Serializer',
        'collectionEnvelope' => 'items',
    ];
}

